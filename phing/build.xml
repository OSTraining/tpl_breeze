<?xml version="1.0" encoding="UTF-8"?>
<project name="OS Training Template Builder" default="package" basedir="../">
    <!-- The short name/folder must be set appropriately -->
    <property name="app.name.short" value="breeze"/>

    <!-- The following depend on folder structure -->
    <property name="package.folder" value="${phing.dir}/packages"/>
    <property name="app.source" value="src"/>
    <property name="version.file" value="${phing.dir}/version.txt"/>
    <property name="local.path" value=""/>

    <!-- Derived properties: shouldn't have to change -->
    <property name="app.name.long" value="tpl_${app.name.short}"/>
    <property name="app.manifest" value="${app.source}/templateDetails.xml"/>
    <loadfile file="${version.file}" property="app.version"/>

    <property name="package.file" value="${app.name.long}.zip"/>

    <!-- all the above can be overridden in the properties file -->
    <available file="${phing.dir}/build.properties" property="build.properties.exists" value="1"/>
    <if>
        <equals arg1="${build.properties.exists}" arg2="1"/>
        <then>
            <property file="${phing.dir}/build.properties" override="true"/>
        </then>
    </if>

    <!-- version for this build file -->
    <property name="build.version" value="1.0.0"/>
    <echo message="Version ${build.version} for Joomla! templates"/>

    <target name="new-release" description="Update version/creation and create package">
        <phingcall target="update-version"/>
        <phingcall target="update-creation"/>
        <xmlproperty file="${app.manifest}" prefix="manifest" keepRoot="false"/>
        <property name="manifest.version" value="" override="false"/>

        <phingcall target="package">
            <property name="package.file" value="${app.name.long}_${manifest.version}.zip"/>
        </phingcall>
    </target>

    <target name="current-release" description="Generate package file for current version">
        <xmlproperty file="${app.manifest}" prefix="manifest" keepRoot="false"/>
        <property name="manifest.version" value="" override="false"/>
        <phingcall target="package">
            <property name="package.file" value="${app.name.long}_${manifest.version}.zip"/>
        </phingcall>
    </target>

    <target name="package" description="Create installation package file">
        <property name="package.path" value="${package.folder}/${package.file}"/>
        <available file="${package.path}" property="package.path.exists" value="1"/>
        <if>
            <equals arg1="${package.path.exists}" arg2="1"/>
            <then>
                <delete file="${package.folder}/${package.file}"/>
            </then>
        </if>
        <zip destfile="${package.folder}/${package.file}" includeemptydirs="true" basedir="${app.source}"/>
    </target>

    <target name="update-creation" description="Update creation date">
        <property name="find.creation" value=""><![CDATA[<creationDate>.*</creationDate>]]></property>
        <property name="replace.creation" value=""><![CDATA[<creationDate>${build.time}</creationDate>]]></property>

        <tstamp>
            <format property="build.time" pattern="%B %d, %Y"/>
        </tstamp>

        <reflexive file="${app.manifest}">
            <filterchain>
                <replaceregexp>
                    <regexp pattern="${find.creation}" replace="${replace.creation}"/>
                </replaceregexp>
            </filterchain>
        </reflexive>
        <echo message="Creation Date: ${build.time}"/>
    </target>

    <target name="update-version" description="Update version #">
        <available property="version.file.exists" file="${version.file}" value="1"/>
        <if>
            <equals arg1="${version.file.exists}" arg2="1"/>
            <then>
                <input propertyName="release.type" validArgs="major,minor,bug">
                    <![CDATA[Current Version ${app.version}]]>
                </input>
                <if>
                    <equals arg1="${release.type}" arg2="major" casesensitive="false"/>
                    <then>
                        <version releasetype="Major" file="${version.file}" property="app.version"/>
                    </then>
                    <elseif>
                        <equals arg1="${release.type}" arg2="minor" casesensitive="false"/>
                        <then>
                            <version releasetype="Minor" file="${version.file}" property="app.version"/>
                        </then>
                    </elseif>
                    <elseif>
                        <equals arg1="${release.type}" arg2="bug" casesensitive="false"/>
                        <then>
                            <version releasetype="Bugfix" file="${version.file}" property="app.version"/>
                        </then>
                    </elseif>
                </if>
            </then>
        </if>

        <property name="find.version" value=""><![CDATA[<version>.*</version>]]></property>
        <property name="replace.version" value=""><![CDATA[<version>${app.version}</version>]]></property>

        <reflexive file="${app.manifest}">
            <filterchain>
                <replaceregexp>
                    <regexp pattern="${find.version}" replace="${replace.version}"/>
                </replaceregexp>
            </filterchain>
        </reflexive>

        <echo message="New Version: ${app.version}"/>
    </target>

    <target name="copy" description="Copy to local development server">
        <echo message="${phing.project.name} - Copying to ${local.path}"/>

        <available file="${local.path}" property="local.path.exists" value="1"/>
        <if>
            <or>
                <not>
                    <equals arg1="${local.path.exists}" arg2="1"/>
                </not>
                <equals arg1="${local.path}" arg2=""/>
            </or>
            <then>
                <fail>You must set the local.path property to a valid directory in your build.properties file</fail>
            </then>
        </if>

        <copy todir="${local.path}/modules/${app.name.short}">
            <fileset dir="${app.source}">
                <include name="**/**"/>
            </fileset>
        </copy>
    </target>
</project>
